import numpy as np
import matplotlib.pyplot as plt


def add_exp_time(AP_rate = 300):
    return np.random.exponential( 1./AP_rate)



def to_dict(**x):
    return x

def get_events(previous_time, current_time, membrane_voltage, vth, delay_timers, refractory_period_timer, parameters_dict):
    
    refractory_period = parameters_dict['refractory_period']
    refractory_period = parameters_dict['refractory_period']
    delta_t = parameters_dict['delta_t']
    
    
    if (len(delay_timers) == 0) and (refractory_period_timer == 'None'):
        if membrane_voltage < vth:
            return 'no RP or timers', [current_time + add_exp_time()] #The next firing time
        else:            
            return 'AP fired', [refractory_period, current_time + delta_t]

        
    if (refractory_period_timer != 'None') and (len(delay_timers) != 0):
        
        # Delay timers less than the refractory period timer
        expired_timers = []
        expire_times = []
        expire_drop_values = []
        for i, delay_timer in enumerate(delay_timers):
            if delay_timer[0] < refractory_period_timer:
                expired_timers.append(i)
                expire_times.append(delay_timer[0])
                expire_drop_values.append(delay_timer[1])
                
                
        unexpired_delay_timers = [delay_timers[i] for i in range(len(delay_timers)) if i not in expired_timers]
        updated_delay_timers = []
        if len(expire_times) != 0:
            for j, delay_timer in enumerate(unexpired_delay_timers):
                updated_delay_timers[j] = [delay_timer[0] - expire_times[-1], delay_timer[1]]
        else:
            updated_delay_timers = unexpired_delay_timers
            
        unexpired_delay_timers = updated_delay_timers
                        
        if len(expire_times) != 0:
            updated_refractory_period_timer = refractory_period_timer - expire_times[-1]
        else:
            updated_refractory_period_timer = refractory_period_timer
            
        
        # Expend the refractory period time
        
        next_time = current_time + updated_refractory_period_timer
        updated_delay_timers_post_refractory_period = []
        
        for ii, delay_timer in enumerate(updated_delay_timers):
            updated_delay_timers_post_refractory_period.append([delay_timer[0] - updated_refractory_period_timer, delay_timer[1]])
        
        delay_timers_AP = []
        for kk, delay_timer in enumerate(updated_delay_timers_post_refractory_period):
            if delay_timer[0] == 0:
                delay_timers_AP.append(delay_timer)
                
        final_timers = [x for x in updated_delay_timers_post_refractory_period if (x[0] != 0)]          
                
        voltage_times = [current_time + delay_timer[i][0] for i in range(len(delay_timers_AP))]
        voltage_drops = [delay_timer[i][1] for i in range(len(delay_timers_AP))]
        
        refractory_period_timer = 'None'
        
        return_1 = [expire_times, expire_drop_values, updated_refractory_period_timer]
        return_2 = [voltage_times, voltage_drops, final_timers, refractory_period_timer, next_time]
        
        return 'post AP delays and refractory period', [return_1, return_2]
    
    if ((refractory_period_timer == 'None') and (len(delay_timers) != 0)) and (membrane_voltage < vth):
        add_time = add_exp_time()
        next_AP_time = current_time + add_time
        
        delay_timers_before_AP_time = []
        delay_timers_after_AP_time = []
        for delay_timer in delay_timers:
            if delay_timer[0] < add_time:
                delay_timers_before_AP_time.append(delay_timer)
            else:
                delay_timers_after_AP_time.append(delay_timer)
                
        drop_times = []
        drop_values = []
        for delay_timer in delay_timers_before_AP_time:
            drop_times.append(current_time + delay_timer[0])
            drop_values.append(delay_timer[1])
            
        updated_delay_timers = []
        for delay_timer in delay_timers_after_AP_time:
            updated_delay_timers.append([current_time + delay_timer[0] - next_AP_time, delay_timer[1]])
            
        return 'no RP, have timers, under vth', [drop_times, drop_values, updated_delay_timers, next_AP_time]
            
    
    if ((refractory_period_timer == 'None') and (len(delay_timers) != 0)) and (membrane_voltage >= vth):
        
        drop_0_time = current_time + delta_t
        
        add_time = add_exp_time()
        
        next_AP_time = drop_0_time + add_time
        
        delay_timers_before_AP_time = []
        delay_timers_after_AP_time = []
        for delay_timer in delay_timers:
            if delay_timer[0] < add_time:
                delay_timers_before_AP_time.append(delay_timer)
            else:
                delay_timers_after_AP_time.append(delay_timer)
                
        drop_times = []
        drop_values = []
        for delay_timer in delay_timers_before_AP_time:
            drop_times.append(delay_timer[0])
            drop_values.append(delay_timer[1])
            
        updated_delay_timers = []
        for delay_timer in delay_timers_after_AP_time:
            updated_delay_timers.append([delay_timer[0] - add_time, delay_timer[1]])
            
        
        return 'no RP, have timers, over vth', [drop_0_time, drop_times, drop_values, 
                                                updated_delay_timers, next_AP_time]
    
def get_inter_AP_times(delay_time_value, end_time_value):

    end_time = end_time_value
    membrane_voltage = 0
    vth = 0.2
    delay_time = delay_time_value
    refractory_period = 0.001
    delta_t = 1e-12
    
    M_u = 70
    M_d = 200
    
    E_u = 5
    E_d = 5
    
    p_u = 0.3
    p_d = 0.6
    
    c_u = 0.02
    c_d = 0.003
    
    r_u = 50e-3
    r_d = 8e-3
    
    tau_d = 0.01
    
    parameters_dict = to_dict(vth = vth,
                         delay_time = delay_time,
                         refractory_period = refractory_period,
                         delta_t = delta_t)
    
    previous_time = 0
    current_time = 0
    
    delay_timers = []
    refractory_period_timer = 'None'
    
    v_history = []
    times_list = []
    AP_times_list = []
    firing_times = []
    
    while current_time < end_time:
        #print(current_time / end_time)
        event_type, events = get_events(previous_time, current_time, membrane_voltage, vth, delay_timers, 
                                        refractory_period_timer, parameters_dict)
        print(delay_timers)
        
        if event_type == 'no RP or timers':
            
            previous_time = current_time
            next_AP_time = events[0] # Arrival of AP
            
            #
            t_difference = next_AP_time - previous_time
            
            # Refill vesicles
            refill_ratio = 1 - np.exp(-t_difference / r_u)
            vesicles_refilled = np.random.binomial(E_u, refill_ratio)
            E_u -= vesicles_refilled
            
            # Release vesicles
            b_u = np.random.binomial(M_u-E_u, p_u) # Number released
            E_u += b_u
            
            # Update the voltage 
            reduction = np.exp(-(t_difference)/tau_d)
            voltage_addition = c_u*b_u
            membrane_voltage = membrane_voltage*reduction + voltage_addition
            #       
            
            v_history.append(membrane_voltage)
            times_list.append(next_AP_time)
            firing_times.append(next_AP_time)
            
            current_time = next_AP_time
    
       
        if event_type == 'AP fired':
            
            membrane_voltage = 0
            v_history.append(membrane_voltage)
            
            # 
            # Refill and release some number of downstream vesicles
            
            t_difference = current_time - previous_time
            # Refill vesicles
            R_d = 1 - np.exp(-t_difference / r_d)
            vesicles_refilled = np.random.binomial(E_d, R_d)
            E_d -= vesicles_refilled
            
            # Release vesicles
            b_d = np.random.binomial(M_d-E_d, p_d) # Number released
            E_d += b_d
            #
              
            previous_time = current_time
            AP_drop_time_plus_delta_t_time = events[1]
            
            times_list.append(current_time)
            firing_times.append(current_time)
            AP_times_list.append(current_time)        
            refractory_period_timer = events[0]

            delay_timers.append([delay_time, -c_d*M_d*p_d])
            
            current_time = AP_drop_time_plus_delta_t_time
            
            
        if event_type == 'post AP delays and refractory period':
              
            expire_times = events[0][0]
            expire_drop_values = events[0][1]
            previous_time = current_time
            current_time = events[1][4]
           
            for i in range(len(expire_times)):
                #ADDED RECENTLY
                membrane_voltage = expire_drop_values[i]
                v_history.append(expire_drop_values[i])
                times_list.append(current_time + expire_times[i])   
    
            updated_refractory_period_timer = events[0][2]
            
            voltage_times = events[1][0]
            voltage_drops = events[1][1]
            
            for i,v_drop in enumerate(voltage_drops):
                membrane_voltage += v_drop
                v_history.append(membrane_voltage)
                times_list.append(voltage_times[i])
            
            delay_timers = events[1][2]
            refractory_period_timer = events[1][3]
    
        if event_type == 'no RP, have timers, under vth':
    
            drop_times = events[0]
            drop_values = events[1]
            delay_timers = events[2]
    
            for i, drop_time in enumerate(drop_times):
                membrane_voltage += drop_values[i]
                v_history.append(membrane_voltage)
                times_list.append(drop_time)
    
    
            previous_time = current_time
            current_time = events[3]
    
            #
            t_difference = current_time - previous_time
            # Refill vesicles
            refill_ratio = 1 - np.exp(-t_difference / r_u)
            vesicles_refilled = np.random.binomial(E_u, refill_ratio)
            E_u -= vesicles_refilled
    
            # Release vesicles
            b_u = np.random.binomial(M_u-E_u, p_u) # Number released
            E_u += b_u
    
            # Update the voltage 
            reduction = np.exp(-(t_difference)/tau_d)
            voltage_addition = c_u*b_u
            membrane_voltage = membrane_voltage*reduction + voltage_addition        
            #
    
            v_history.append(membrane_voltage)
            times_list.append(current_time)
            AP_times_list.append(current_time)
            firing_times.append(current_time)
            
        if event_type == 'no RP, have timers, over vth':
            
            drop_0_time = events[0]       
            
            #####################################
            t_difference = current_time - previous_time
            # Refill vesicles
            R_d = 1 - np.exp(-t_difference / r_d)
            vesicles_refilled = np.random.binomial(E_d, R_d)
            E_d -= vesicles_refilled
            
            # Release vesicles
            b_d = np.random.binomial(M_d-E_d, p_d) # Number released
            E_d += b_d        
    
            previous_time = current_time
            current_time = drop_0_time
            
            membrane_voltage = 0
            v_history.append(membrane_voltage)
            firing_times.append(current_time)
            AP_times_list.append(current_time)
            times_list.append(current_time)
            delay_timers.append([delay_time,-c_d*M_d*p_d])
            #####################################
                            
            drop_times = events[1]
            drop_values = events[2]
            delay_timers = events[3]
            
            for i, drop_time in enumerate(drop_times):           
                membrane_voltage += drop_values[i]
                v_history.append(membrane_voltage)
                times_list.append(drop_0_time)
    
    inter_AP_times = np.diff(AP_times_list)
    
    times_list = [0] + times_list
    v_history = [0] + v_history

    return inter_AP_times, times_list, v_history, vth

def get_data(end_time_value, delay_time_value_fb):

    end_time_value = end_time_value
    delay_time_value_fb = delay_time_value_fb
    delay_time_value_nfb = np.inf
    
    inter_AP_times_nfb, t_list_nfb, v_hist_nfb, vth_nfb = get_inter_AP_times(
        delay_time_value = delay_time_value_nfb, end_time_value = end_time_value)
    inter_AP_times_fb, t_list_fb, v_hist_fb, vth_fb = get_inter_AP_times(
        delay_time_value = delay_time_value_fb, end_time_value = end_time_value)
    
    r1 = {'inter_AP_times':inter_AP_times_nfb, 'times_list': t_list_nfb, 'v_history':v_hist_nfb, 
          'delay_time_value': delay_time_value_nfb, 'vth':vth_nfb}
    r2 = {'inter_AP_times':inter_AP_times_fb, 'times_list': t_list_fb, 'v_history':v_hist_fb, 
          'delay_time_value': delay_time_value_fb, 'vth':vth_fb}
    
    return r1, r2
    
    return [inter_AP_times_nfb, t_list_nfb, v_hist_nfb, vth_nfb, delay_time_value_nfb], \
           [inter_AP_times_fb, t_list_fb, v_hist_fb, vth_fb, delay_time_value_fb]
           
def plot_voltages(d1nfb, d1fb, d2nfb, d2fb):
    
    fig, ax = plt.subplots(4,1)
    ax[0].plot(d1nfb['times_list'], d1nfb['v_history'], label = 'No feedback 1 = {}'.format(np.around(d1nfb['delay_time_value'],3)))
    ax[0].plot(d1nfb['times_list'], d1nfb['vth'] * np.ones(len(d1nfb['times_list'])))
    ax[1].plot(d1fb['times_list'], d1fb['v_history'], label = 'Delay 1 = {}'.format(np.around(d1fb['delay_time_value'],3)))
    ax[1].plot(d1fb['times_list'], d1fb['vth'] * np.ones(len(d1fb['times_list'])))
    ax[0].legend(loc='upper right')
    ax[1].legend(loc = 'upper right')
    ax[2].plot(d2nfb['times_list'], d2nfb['v_history'], label = 'No feedback 2 = {}'.format(np.around(d2nfb['delay_time_value'],3)))
    ax[2].plot(d2nfb['times_list'], d2nfb['vth'] * np.ones(len(d2nfb['times_list'])))
    ax[3].plot(d2fb['times_list'], d2fb['v_history'], label = 'Delay 2 = {}'.format(np.around(d2fb['delay_time_value'],3)))
    ax[3].plot(d2fb['times_list'], d2fb['vth'] * np.ones(len(d2fb['times_list'])))
    ax[2].legend(loc = 'upper right')
    ax[3].legend(loc = 'upper right')
    plt.show()
    
    
def plot_v_hist(data1, data2):
    fig, ax = plt.subplots(2,1)
    ax[0].plot(data1['times_list'], data1['v_history'], label = 'No feedback 1 = {}'.format(np.around(data1['delay_time_value'],3)))
    ax[0].plot(data1['times_list'], data1['vth'] * np.ones(len(data1['times_list'])))
    ax[1].plot(data2['times_list'], data2['v_history'], label = 'Delay 1 = {}'.format(np.around(data2['delay_time_value'],3)))
    ax[1].plot(data2['times_list'], data2['vth'] * np.ones(len(data2['times_list'])))
    ax[0].legend()
    ax[1].legend()
    
    plt.show()
    
    
##############################################################################################################    
# 
#                                   Main Code
#
##############################################################################################################   
end_time_value = 1
delay_time_value_fb_1 = 0
delay_time_value_fb_2 = 0.02
n_bins = 50

d1nfb, d1fb = get_data(end_time_value, delay_time_value_fb_1)
d2nfb, d2fb = get_data(end_time_value, delay_time_value_fb_2)

# plot_v_hist(d1nfb, d1fb)

plot_voltages(d1nfb, d1fb, d2nfb, d2fb)

CV1nfb = np.std(d1nfb['inter_AP_times'])/np.mean(d1nfb['inter_AP_times'])
CV1fb = np.std(d1fb['inter_AP_times'])/np.mean(d1fb['inter_AP_times'])
CV2nfb = np.std(d2nfb['inter_AP_times'])/np.mean(d2nfb['inter_AP_times'])
CV2fb = np.std(d2fb['inter_AP_times'])/np.mean(d2fb['inter_AP_times'])


bins_shape = np.linspace(0, 0.06, n_bins)

fig, ax = plt.subplots(1,2)

density_type = True

ax[0].hist(d1nfb['inter_AP_times'], bins = bins_shape, density = density_type, label = 'No feedback')
ax[0].hist(d1fb['inter_AP_times'], bins = bins_shape, density = density_type, alpha = 0.7, label = 'Autapse feedback = {}'.format(delay_time_value_fb_1))
ax[0].plot([], [], ' ', label = 'CV no feedback = {}\nCV delay = {}'.format(np.around(CV1nfb,3),np.around(CV1fb,3)))
ax[0].legend(loc= 'upper right')

ax[1].hist(d2nfb['inter_AP_times'], bins = bins_shape, density = density_type, label = 'No feedback')
ax[1].hist(d2fb['inter_AP_times'], bins = bins_shape, density = density_type, alpha = 0.7, label = 'Autapse feedback = {}'.format(delay_time_value_fb_2))
ax[1].plot([], [], ' ', label = 'CV no feedback = {}\nCV delay = {}'.format(np.around(CV2nfb,3),np.around(CV2fb,3)))
ax[1].legend(loc = 'upper right')

plt.show()

