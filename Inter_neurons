import numpy as np
import matplotlib.pyplot as plt

def add_exp_time(AP_rate = 300):
    return np.random.exponential( 1./AP_rate)

def get_inter_AP_times(params):
    
    end_time = params['end_time']
    delay_time = params['delay_time']
    vth_d = params['vth_d']
    vth_I = params['vth_I']
    test_type = params['test_type']

    
    end_time = end_time
    delay_time = delay_time
    
    M_u_d = 70 # 70
    M_u_I = 70
    M_I = 70

    E_u_d = 5
    E_u_I = 5
    E_I = 5
    
    p_u_d = 0.3 # 0.3
    p_u_I = 0.3
    p_I = 0.3

    c_u_d = 0.02 # 0.02
    c_u_I = 0.02
    c_I = 0.02
    
    k_u_d = 20
    k_u_I = 20
    k_I = 20

    if test_type == 'FB':
        k_d = params['k_d_value']
    
    tau_d = 0.01 #0.001
    
    refractory_period_value = 0.001
    
    refractory_period_timer_d = 'None'
    refractory_period_timer_I = 'None'
    delta_t = 1e-9    

    previous_time = 0
    current_time = 0   
    V_d = 0
    V_I = 0
    time_of_previous_vesicle_release_d = 0
    time_of_current_vesicle_release_d = 0 
    b_u = 0
    b_d = 0
    number_of_burst_events = 0
    
    v_history = []
    times_list = []
    AP_history = []
    number_of_bursts_until_AP = []    

    # Main program
    while current_time < end_time:
#        print(current_time / end_time)
        add_time = add_exp_time()
        next_AP_time = current_time + add_time
        current_time = next_AP_time
        
        # Refill vesicles
        t_difference = current_time - previous_time
        refill_ratio = 1 - np.exp(-t_difference * k_u)
        #refill_ratio = 1
        vesicles_refilled = np.random.binomial(E_u, refill_ratio)
        
        E_u_d -= vesicles_refilled
        b_u_d = np.random.binomial(M_u_d-E_u_d, p_u_d) # Number released
        E_u_d += b_u_d

        # Update the voltage 
        reduction_u_d = np.exp(-(t_difference)/tau_d)
        # Check to see if action potential occurres during refractory period
        if refractory_period_timer_d != 'None':
            if add_time <= refractory_period_timer_d:
                voltage_addition = 0
                refractory_period_timer_d = refractory_period_timer_d - add_time
                if refractory_period_timer_d == 0:
                    refractory_period_timer_d = 'None'
            if add_time > refractory_period_timer_d:
                refractory_period_timer_d = 'None'
                voltage_addition = c_u_d*b_u*d
        else:
            voltage_addition = c_u_d*b_u_d
        V_d = V_d*reduction + voltage_addition 
        v_history.append(V_d)
        times_list.append(current_time)
        previous_time = current_time
        
        # Update the number of burst events
        number_of_burst_events_d += 1
        number_of_burst_events_I += 1

        # Action potential, downstream neuron
        if V_d >= vth_d:
            
            if refractory_period_timer_d == 'None':
                refractory_period_timer_d = refractory_period_value - delta_t    
            
            # Get burst numbers
            number_of_bursts_until_AP.append(number_of_burst_events)
            number_of_burst_events = 0

            # Refill vesicles
            time_of_current_vesicle_release_d = current_time
            t_diff_vesc = time_of_current_vesicle_release_d - time_of_previous_vesicle_release_d
            refill_ratio = 1 - np.exp(-t_diff_vesc * k_d) 
            #refill_ratio = 1
            vesicles_refilled = np.random.binomial(E_d, refill_ratio)
            E_d -= vesicles_refilled
            
            #Release vesicles
            b_d = np.random.binomial(M_d-E_d, p_d)
            
            E_d += b_d
            time_of_previous_vesicle_release_d = current_time
            V_d = -c_d*b_d

            v_history.append(V_d)
            times_list.append(current_time + delta_t)
            AP_history.append(current_time)
            previous_time = current_time
            
            # Update time
            current_time = current_time + delta_t
            
        # Action potential, Inter-neuron
        if V_I >= vth_I:
            
            if refractory_period_timer_I == 'None':
                refractory_period_timer_I = refractory_period_value - delta_t    
            
            # Get burst numbers
            number_of_bursts_until_AP_I.append(number_of_burst_events)
            number_of_burst_events_I = 0               

            # Refill vesicles
            time_of_current_vesicle_release_d = current_time
            t_diff_vesc = time_of_current_vesicle_release_d - time_of_previous_vesicle_release_d
            refill_ratio = 1 - np.exp(-t_diff_vesc * k_d) 
            #refill_ratio = 1
            vesicles_refilled = np.random.binomial(E_d, refill_ratio)
            E_d -= vesicles_refilled
            
            #Release vesicles
            b_d = np.random.binomial(M_d-E_d, p_d)
            
            E_d += b_d
            time_of_previous_vesicle_release_d = current_time
            
            # Update voltage
            V_d = 0
            v_history.append(V_d)
            times_list.append(current_time + delta_t)
            AP_history.append(current_time)
            previous_time = current_time
            
            # Update time
            current_time = current_time + delta_t

    inter_AP_times = np.diff(AP_history)          
    
    return_dict = {'inter':inter_AP_times, 't':times_list, 'v':v_history, 'vth_d': vth_d,
                   'vth_I': vth_I, 'b_nums':number_of_bursts_until_AP, 
                   'AP_history':AP_history}

    return return_dict

def test_plot(end_time, delay_time2, vth, args, nfb, d0):

    d2 = get_inter_AP_times(end_time, delay_time2, 0.2, args)
    fig, ax = plt.subplots(3,1)
    ax[0].plot(nfb['t'], nfb['v'], label = 'No Feedback')
    ax[0].plot(nfb['t'], nfb['vth']*np.ones(len(nfb['t'])))
    ax[0].legend()
    ax[1].plot(d0['t'], d0['v'], label = 'Delay = 0')
    ax[1].plot(d0['t'], d0['vth']*np.ones(len(d0['t'])))
    ax[1].legend()
    ax[1].set_ylabel('Membrane voltage')
    ax[2].plot(d2['t'], d2['v'], label = 'Delay = {}'.format(delay_time2))
    ax[2].plot(d2['t'], d2['vth']*np.ones(len(d2['t'])))
    ax[2].legend()
    ax[2].set_xlabel('Time')
    
    plt.show()

def to_dict(**x):
    return x

def histograms_no_noise(end_time, delay_time0, delay_no_feedback, delay_percentage, 
                        nfb, d0):
    
    #test_plot(end_time, delay_time2 = 0.1, vth = 0.2)
     
    #
    percentages = [0, 0.5, 1]
    
    inters = []
    ts = []
    vs = []
    vths = []
    b_lists = []

    mean_delay_0 = np.mean(d0['inter'])
    
    if len(d0['inter']) == 0:
        print('NO AP\'s IN DOWNSTREAM NEURON')
    
    for i in range(len(percentages)):
        
        params_d = to_dict(end_time = end_time, delay_time = percentages[i]*mean_delay_0, 
                           vth = 0.2, delay_percentage = delay_percentage)
        
        d = get_inter_AP_times(params_d)
        inters.append(d['inter'])
        ts.append(d['t'])
        vs.append(d['v'])
        vths.append(d['vth'])
        b_lists.append(d['b_nums'])
        
    n_bins = 300
    
    bins_array = np.linspace(0, 3, n_bins)
    density_type = True
    
    font_size = 20
    
    fig, ax = plt.subplots(3,1)
    ax[0].hist(nfb['inter'] / np.mean(nfb['inter']), color ='tab:blue', 
               bins = bins_array, density = density_type, alpha = 1, 
               label = 'No feedback\n$CV_T$={}'.format(np.around(
                   np.std(nfb['inter'])/np.mean(nfb['inter']),3))
               )
    ax[1].hist(d0['inter'] / np.mean(d0['inter']), color = 'tab:orange', 
               density = density_type, 
               alpha = 0.7, 
               bins = bins_array, 
               label = 'Feedback with\nno delay\n$CV_T$ = {}'.format(
                  np.around(np.std(d0['inter'])/np.mean(d0['inter']),3))
               )
    ax[2].hist(inters[1] / np.mean(inters[1]), color = 'green', bins = bins_array,
               density = density_type, 
               label = 'Feedback with \nstochastic delay\n$CV_T={}$'.format(\
                np.around(np.std(inters[i])/np.mean(inters[1]),3))
               )
    
    ax[0].set_xticks([])
    ax[1].set_xticks([])
    
    ax[0].tick_params(axis = 'y', labelsize = font_size)
    ax[1].tick_params(axis = 'y', labelsize = font_size)
    ax[2].tick_params(axis = 'y', labelsize = font_size)
    ax[2].tick_params(axis = 'x', labelsize = font_size)
    ax[2].legend(fontsize = font_size, handlelength = 0)
    ax[0].legend(fontsize = font_size, handlelength = 0)
    ax[1].legend(fontsize = font_size, handlelength = 0)
        
    ax[2].set_xlabel('Normalized postynaptic AP firing time', size = font_size)
    ax[1].set_ylabel('Probability', size = font_size)
        
    plt.show()
    
def histograms_noise(end_time, delay_time0, delay_no_feedback, 
                     delay_mean_percentage, delay_percentage_list, nfb, d0):
    
    #test_plot(end_time, delay_time2 = 0.1, vth = 0.2)
     
    inters = []
    ts = []
    vs = []
    vths = []
    b_lists = []
    
    mean_delay_0 = np.mean(d0['inter'])
    
    for i in range(len(delay_percentage_list)):
        params_d = to_dict(end_time = end_time, delay_time = delay_mean_percentage*mean_delay_0, 
                           vth = 0.2, delay_percentage = delay_percentage_list[i])
        
        d = get_inter_AP_times(params_d)
        inters.append(d['inter'])
        ts.append(d['t'])
        vs.append(d['v'])
        vths.append(d['vth'])
        b_lists.append(d['b_nums'])
        
    n_bins = 100
    
    bins_array = np.linspace(0, 3, n_bins)
    density_type = True
    
    font_size = 20
    
    fig, ax = plt.subplots(len(delay_percentage_list)+2,1)
    
    ax[0].hist(nfb['inter'] / np.mean(nfb['inter']), color ='tab:blue', 
               bins = bins_array, density = density_type, alpha = 1, 
               label = 'No feedback\n$CV_T$={}'.format(np.around(
                   np.std(nfb['inter'])/np.mean(nfb['inter']),3)))
    ax[0].legend(loc = 'upper right', fontsize = font_size)
    ax[0].tick_params(axis = 'y', labelsize = font_size)
    ax[0].tick_params(axis = 'x', labelsize = font_size)
    
    for i in range(len(delay_percentage_list)):

        ax[i+1].hist(inters[i] / np.mean(inters[i]), color = 'green', bins = bins_array,
                   density = density_type, 
                   label = 'Noise = +-{}%\n$CV_T={}$'.format(\
                    100*np.around(delay_percentage_list[i],3),
                    np.around(np.std(inters[i])/np.mean(inters[i]),3)))
        ax[i+1].tick_params(axis = 'y', labelsize = font_size)
        ax[i+1].tick_params(axis = 'x', labelsize = font_size)
        ax[i+1].legend(fontsize = font_size, loc = 'upper right')
        
    ax[len(delay_percentage_list)+1].hist(d0['inter'] / np.mean(d0['inter']), color = 'tab:orange', 
               density = density_type, 
               alpha = 0.7, 
               bins = bins_array, 
               label = 'Feedback with no delay\n$CV_T$ = {}'.format(
                  np.around(np.std(d0['inter'])/np.mean(d0['inter']),3)))
    ax[len(delay_percentage_list)+1].legend(fontsize = font_size, loc = 'upper right')
    ax[len(delay_percentage_list) + 1].set_xlabel('Normalized postynaptic\nAP firing time', size = font_size)
    ax[3].set_ylabel('Probability', size = font_size)
    ax[len(delay_percentage_list)+1].tick_params(axis = 'x', labelsize = font_size)
    ax[len(delay_percentage_list)+1].tick_params(axis = 'y', labelsize = font_size)
    ax[len(delay_percentage_list)+1].tick_params(axis = 'x', labelsize = font_size)

    plt.show()

#################################################################################################
#
#                                 Main code
#
#################################################################################################

end_time = 60
delay_time0 = 0
delay_no_feedback = 1e6
delay_percentage = 0

vth_d = 0.2
vth_I = 0.2

p_u_d = 0.3 # Prob fire from upstream to downstream

p_u_I = 0.3 # Prob fire from upstream to inter

M_u_d = 70
M_u_I = 70

p_I_list = np.linspace(0, 1, 40) # Prob fire from inter to downstream
M_I_list = np.arange(10, 501, 5)

CVs = np.zeros((len(p_I_list), len(M_I_list)))

for i, p_I in p_I_list:
    print(i/len(p_I_list))
    for j, M_I in enumerate(M_I_list):
    
        params_nfb = to_dict(end_time = end_time, delay_time = delay_no_feedback, 
                             vth_d = vth_d, vth_I = vth_I, M_I = M_I, p_I = p_I, 
                             test_type = 'NFB')
    
        params_fb = to_dict(end_time = end_time, delay_time = delay_no_feedback, 
                            vth_d = vth_d, vth_I = vth_I, M_I = M_I, p_I = p_I,
                            test_type = 'FB')

        nfb = get_inter_AP_times(params_nfb)
        fb = get_inter_AP_times(params_fb)

        CV_nfb = np.std(nfb['inter'])/np.mean(nfb['inter'])
        CV_fb = np.std(fb['inter'])/np.mean(fb['inter'])
        
        normalized_CV = CV_fb / CV_nfb
        CVs[i,j] = normalized_CV
        
plt.imshow(CVs)
