import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import erlang, invgauss

def D(data):
    
    name = data[0]
    
    if name == 'erl':
        k = data[1]
        lam = data[2]
        return erlang.rvs(k, lam)
    
    if name == 'exp':
        return np.random.exponential( 1 / data[1] )
    
    if name == 'invg':
        mu = data[1]
        lam = data[2]
        
        return invgauss.rvs(mu, lam)
    # Distributions:  Deterministic, exponential, gamma, inverse gaussian, lognormal.
  
def get_data(n_seconds, D_data):
    D_list = []
    max_time = 0
    D1_current = 0
    
    while max_time < n_seconds:
        
        D1 = D(D_data[0])
        D2 = D(D_data[1])
        D3 = D(D_data[2])
        
        D1_current += D1
        D_list_value = [D1_current, D1_current + D2, D1_current + D2 + D3]
        
        max_time = D_list_value[-1]
        D_list.append(D_list_value)
    return np.array(D_list), len(D_list)


def find_smallest_indices(M):
    # Flatten the matrix into a 1D array
    flat_M = M.flatten()
    # Get the indices that would sort the array
    sorted_indices = np.argsort(flat_M)
    # Loop through the sorted indices and fill X with the corresponding coordinates
    for i, idx in enumerate(sorted_indices):
        # Get the row and column indices of the flattened index
        row_idx, col_idx = np.unravel_index(idx, M.shape)
        # Fill X with the corresponding coordinates
        yield [row_idx, col_idx]


##############################################################################
#
#                             Main program
#
##############################################################################

# =============================================================================
# D_data = [['exponential', 1], # Inter molecule production rate
#           ['lognormal',(0,2)], # Time in nuclear stage
#           ['gamma', (1,1)]] # Time in cellular stage
# =============================================================================

# Large exponential mean implies small rate

# erlang k (number to check for) lambda (rate)
# invg mu (mean) lambda (scale parameter)
# exp lambda (rate)

# =============================================================================
# D_data = [['erl', 2, 5 ], # Inter molecule production rate
#           ['invg', 1, 3], # Time in nuclear stage
#           ['exp', 10]] # Time in cellular stage
# =============================================================================

D_data = [['exp', 100], # Inter molecule production rate
          ['exp', 1], # Time in nuclear stage
          ['exp', 10]] # Time in cellular stage

# exp 100, 1, 10

n_seconds = 60*60
data_times, n_molecules = get_data(n_seconds, D_data)

final_production_time = data_times[:, 0][-1]

ordered_indices = find_smallest_indices(data_times)
# =============================================================================
# sorted_times = np.array([data_times[ordered_indices[i][0], ordered_indices[i][1]]for i in range(len(ordered_indices))])
# sorted_times = sorted_times.reshape((len(sorted_times), 1))
# =============================================================================

M_n = [0]
M_c = [0]

Mn_num = 0
Mc_num = 0


sorted_times = []
for ord_ind in ordered_indices:
    sorted_times.append([data_times[ord_ind[0], ord_ind[1]]])
    if (ord_ind[1] == 0):
        Mn_num += 1
    if (ord_ind[1] == 1):
        Mc_num += 1
        Mn_num -= 1
    if (ord_ind[1] == 2):
        Mc_num -= 1
        
    M_n.append(Mn_num)
    M_c.append(Mc_num) 
    
sorted_times = np.array(sorted_times)
sorted_times = sorted_times.reshape((len(sorted_times),1))
sorted_times_add_0 = np.vstack([0, sorted_times])

times_range = np.array([sorted_times_add_0[i] for i in range(len(M_n)) if sorted_times_add_0[i] < final_production_time])
M_n_range = M_n[:len(times_range)]
M_c_range = M_c[:len(times_range)]  

fano_check_spot = 4
fano_check = M_n_range[fano_check_spot:]
fano_value = np.std(fano_check)**2/np.mean(fano_check)

# =============================================================================
# 
# max_value = np.max([np.max(M_n_range), np.max(M_c_range)])
# 
# plt.figure()
# 
# plt.title('M_n and M_c')
# plt.title('Number of molecules vs time for {} nuclear MRNA and cellular mRNA'.format(n_molecules) + \
#            ' with distributions: {}, {}, {}'.format(D_data[0][0], D_data[1][0], D_data[2][0]))
# 
# plt.plot(times_range, M_n_range, label = 'Nuclear mRNA')
# plt.plot(times_range, M_c_range,label = 'Cellular mRNA')
# plt.ylim([0, int(np.max([M_n, M_c]))])
# 
# # Create empty plot with blank marker containing the extra label
# plt.plot([], [], ' ', label="Production = {}(mean ={})".format(D_data[0][0], D_data[0][1]))
# plt.plot([], [], ' ', label="Nuclear mRNA = {}(mean={})".format(D_data[1][0], D_data[1][1]))
# plt.plot([], [], ' ', label="Cellular mRNA = {}(mean={})".format(D_data[2][0], D_data[2][1]))   
# plt.plot([], [], ' ', label="Fano = {}".format(fano_value))   
# plt.plot(fano_check_spot * np.ones(1000), np.linspace(0,max_value,1000))
# 
# plt.ylabel('Number of molecules')
# plt.xlabel('Time (s)')
# plt.legend()
# plt.show()
# =============================================================================

M_n_norm = M_n / np.mean(M_n)
M_c_norm = M_c / np.mean(M_c)
density_type = True

plt.figure(figsize = (6.4, 4.8))
font_size = 20
bins_array_M_n = np.linspace(np.min(M_n_norm), np.max(M_n_norm), 30)
bins_array_M_c = np.linspace(np.min(M_c_norm), np.max(M_c_norm), 30)
# =============================================================================
# plt.title('Histogram of Nuclear mRNA and Cellular mRNA', size = font_size)
# =============================================================================
plt.hist(M_n_norm, bins = bins_array_M_n, density = density_type, label = 'Nuclear mRNA')
plt.hist(M_c_norm, bins = bins_array_M_c, density = density_type, label = 'Cellular mRNA', alpha = 0.7)
plt.ylabel('Probability', size = font_size)
plt.xlabel('Normalized number of molecules', size = font_size)
plt.plot([], [], ' ', label = 'FF = {}'.format(np.around(fano_value,3)))
plt.yticks(fontsize = font_size)
plt.xticks(fontsize = font_size)
plt.plot([], [], ' ', label="Production:\n{}(mean ={})".format(D_data[0][0], D_data[0][1]))
plt.plot([], [], ' ', label="Nuclear mRNA:\n{}(mean={})".format(D_data[1][0], D_data[1][1]))
plt.plot([], [], ' ', label="Cellular mRNA:\n{}(mean={})".format(D_data[2][0], D_data[2][1]))  
plt.legend(loc = 'upper right', fontsize = font_size-5)
plt.show()

